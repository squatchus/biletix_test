Проект тестового задания на позицию iOS разработчика в компанию Biletix.

Текст тестового задания:
https://docs.google.com/document/d/1QkXNfz-setvkWGEXwon9v1Yc_4aXWceshC0aU5osmrg/edit?usp=sharing

Документация к заданию:
https://docs.google.com/document/d/1Icz7tLWbpYlfARzA70mgMSNm9cGaj1fT-4llxhblu0A/edit?usp=sharing

Проект использует триальную версию библиотеки SOAPEngine - наиболее поддерживаемой библиотеки для работы с SOAP API. Триальная версия поддерживает только работу на симуляторе. Для каждого запроса, в приложении создаётся отдельный инстанс SOAPEngine. Подобная практика является рекомендуемой и описана разработчиками библиотеки на GitHub.

Помимо указанных параметров метода API GetOptimalFares(), используются также ключ "direct_only", т.к. сложные рейсы с пересадками требует иного формата отображения, нежели тот, что предложен для реализации в задании.

Если посмотреть на веб-версию, то видно что ряд тарифов, предлагает более одного рейса для перелёта "туда" и "обратно". В приложении, результаты по таким тарифам представлены отдельными ячейками. Т.е. для тарифа, стоимостью X, где есть варианты перелёта туда: T1 и T2, а обратно: О1 и О2, будет отображено 4 результата поиска со стоимостью Х: T1-O1, T1-O2, T2-O1, T2-O2.

Возможные улучшения, не реальизованные в данной версии:
    1) Нормальный UI.
    2) Использование более продвинутой архитектуры view-слоя, нежели MVC.
    3) Улучшение детализации сообщений об ошибках API.
